{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport * as React from \"react\";\nimport { getParitialVisibilityGutter, getWidthFromDeviceType } from \"./elementWidth\";\n\nfunction getInitialState(state, props) {\n  var domLoaded = state.domLoaded,\n      slidesToShow = state.slidesToShow,\n      containerWidth = state.containerWidth,\n      itemWidth = state.itemWidth;\n  var deviceType = props.deviceType,\n      responsive = props.responsive,\n      ssr = props.ssr,\n      partialVisbile = props.partialVisbile;\n  var flexBisis;\n  var domFullyLoaded = Boolean(domLoaded && slidesToShow && containerWidth && itemWidth);\n\n  if (ssr && deviceType && !domFullyLoaded) {\n    flexBisis = getWidthFromDeviceType(deviceType, responsive);\n  }\n\n  var shouldRenderOnSSR = Boolean(ssr && deviceType && !domFullyLoaded && flexBisis);\n  var paritialVisibilityGutter = getParitialVisibilityGutter(responsive, partialVisbile, deviceType, state.deviceType);\n  var shouldRenderAtAll = shouldRenderOnSSR || domFullyLoaded;\n  return {\n    shouldRenderOnSSR: shouldRenderOnSSR,\n    flexBisis: flexBisis,\n    domFullyLoaded: domFullyLoaded,\n    paritialVisibilityGutter: paritialVisibilityGutter,\n    shouldRenderAtAll: shouldRenderAtAll\n  };\n}\n\nfunction getIfSlideIsVisbile(index, state) {\n  var currentSlide = state.currentSlide,\n      slidesToShow = state.slidesToShow;\n  return index >= currentSlide && index < currentSlide + slidesToShow;\n}\n\nfunction getTransformForCenterMode(state, props) {\n  if (state.currentSlide === 0 && !props.infinite) {\n    return state.transform;\n  } else {\n    return state.transform + state.itemWidth / 2;\n  }\n}\n\nfunction getTransformForPartialVsibile(state) {\n  var paritialVisibilityGutter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var props = arguments.length > 2 ? arguments[2] : undefined;\n  var currentSlide = state.currentSlide,\n      slidesToShow = state.slidesToShow;\n  var isRightEndReach = isInRightEnd(state);\n  var shouldRemoveRightGutter = !props.infinite && isRightEndReach;\n  var transform = state.transform + currentSlide * paritialVisibilityGutter;\n\n  if (shouldRemoveRightGutter) {\n    var remainingWidth = state.containerWidth - (state.itemWidth - paritialVisibilityGutter) * slidesToShow;\n    return transform + remainingWidth;\n  }\n\n  return transform;\n}\n\nfunction isInLeftEnd(_ref) {\n  var currentSlide = _ref.currentSlide;\n  return !(currentSlide > 0);\n}\n\nfunction isInRightEnd(_ref2) {\n  var currentSlide = _ref2.currentSlide,\n      totalItems = _ref2.totalItems,\n      slidesToShow = _ref2.slidesToShow;\n  return !(currentSlide + slidesToShow < totalItems);\n}\n\nfunction notEnoughChildren(state, props, items) {\n  var childrenArr = React.Children.toArray(props.children);\n  var slidesToShow = state.slidesToShow;\n  return items ? childrenArr.length < items : childrenArr.length < slidesToShow;\n}\n\nfunction getSlidesToSlide(state, props) {\n  var domLoaded = state.domLoaded,\n      slidesToShow = state.slidesToShow,\n      containerWidth = state.containerWidth,\n      itemWidth = state.itemWidth;\n  var deviceType = props.deviceType,\n      responsive = props.responsive;\n  var slidesToScroll = props.slidesToSlide || 1;\n  var domFullyLoaded = Boolean(domLoaded && slidesToShow && containerWidth && itemWidth);\n  var ssr = props.ssr && props.deviceType && !domFullyLoaded;\n\n  if (ssr) {\n    _Object$keys(responsive).forEach(function (device) {\n      var slidesToSlide = responsive[device].slidesToSlide;\n\n      if (deviceType === device && slidesToSlide) {\n        slidesToScroll = slidesToSlide;\n      }\n    });\n  }\n\n  if (domFullyLoaded) {\n    _Object$keys(responsive).forEach(function (item) {\n      var _responsive$item = responsive[item],\n          breakpoint = _responsive$item.breakpoint,\n          slidesToSlide = _responsive$item.slidesToSlide;\n      var max = breakpoint.max,\n          min = breakpoint.min;\n\n      if (slidesToSlide && window.innerWidth >= min && window.innerWidth <= max) {\n        slidesToScroll = slidesToSlide;\n      }\n    });\n  }\n\n  return slidesToScroll;\n}\n\nexport { isInLeftEnd, isInRightEnd, getInitialState, getIfSlideIsVisbile, getTransformForCenterMode, getTransformForPartialVsibile, notEnoughChildren, getSlidesToSlide };","map":{"version":3,"sources":["/Users/admin/Desktop/REACT/with-apollo-app/components/utils/common.js"],"names":["React","getParitialVisibilityGutter","getWidthFromDeviceType","getInitialState","state","props","domLoaded","slidesToShow","containerWidth","itemWidth","deviceType","responsive","ssr","partialVisbile","flexBisis","domFullyLoaded","Boolean","shouldRenderOnSSR","paritialVisibilityGutter","shouldRenderAtAll","getIfSlideIsVisbile","index","currentSlide","getTransformForCenterMode","infinite","transform","getTransformForPartialVsibile","isRightEndReach","isInRightEnd","shouldRemoveRightGutter","remainingWidth","isInLeftEnd","totalItems","notEnoughChildren","items","childrenArr","Children","toArray","children","length","getSlidesToSlide","slidesToScroll","slidesToSlide","forEach","device","item","breakpoint","max","min","window","innerWidth"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport {\n  getParitialVisibilityGutter,\n  getWidthFromDeviceType\n} from \"./elementWidth\";\n\nfunction getInitialState(state, props) {\n  const { domLoaded, slidesToShow, containerWidth, itemWidth } = state;\n  const { deviceType, responsive, ssr, partialVisbile } = props;\n  let flexBisis;\n  const domFullyLoaded = Boolean(\n    domLoaded && slidesToShow && containerWidth && itemWidth\n  );\n  if (ssr && deviceType && !domFullyLoaded) {\n    flexBisis = getWidthFromDeviceType(deviceType, responsive);\n  }\n  const shouldRenderOnSSR = Boolean(\n    ssr && deviceType && !domFullyLoaded && flexBisis\n  );\n  const paritialVisibilityGutter = getParitialVisibilityGutter(\n    responsive,\n    partialVisbile,\n    deviceType,\n    state.deviceType\n  );\n  const shouldRenderAtAll = shouldRenderOnSSR || domFullyLoaded;\n  return {\n    shouldRenderOnSSR,\n    flexBisis,\n    domFullyLoaded,\n    paritialVisibilityGutter,\n    shouldRenderAtAll\n  };\n}\n\nfunction getIfSlideIsVisbile(index, state) {\n  const { currentSlide, slidesToShow } = state;\n  return index >= currentSlide && index < currentSlide + slidesToShow;\n}\n\nfunction getTransformForCenterMode(state, props) {\n  if (state.currentSlide === 0 && !props.infinite) {\n    return state.transform;\n  } else {\n    return state.transform + state.itemWidth / 2;\n  }\n}\nfunction getTransformForPartialVsibile(\n  state,\n  paritialVisibilityGutter = 0,\n  props\n) {\n  const { currentSlide, slidesToShow } = state;\n  const isRightEndReach = isInRightEnd(state);\n  const shouldRemoveRightGutter = !props.infinite && isRightEndReach;\n  const transform = state.transform + currentSlide * paritialVisibilityGutter;\n  if (shouldRemoveRightGutter) {\n    const remainingWidth =\n      state.containerWidth -\n      (state.itemWidth - paritialVisibilityGutter) * slidesToShow;\n    return transform + remainingWidth;\n  }\n  return transform;\n}\n\nfunction isInLeftEnd({ currentSlide }) {\n  return !(currentSlide > 0);\n}\nfunction isInRightEnd({ currentSlide, totalItems, slidesToShow }) {\n  return !(currentSlide + slidesToShow < totalItems);\n}\n\nfunction notEnoughChildren(state, props, items) {\n  const childrenArr = React.Children.toArray(props.children);\n  const { slidesToShow } = state;\n  return items ? childrenArr.length < items : childrenArr.length < slidesToShow;\n}\n\nfunction getSlidesToSlide(state, props) {\n  const { domLoaded, slidesToShow, containerWidth, itemWidth } = state;\n  const { deviceType, responsive } = props;\n  let slidesToScroll = props.slidesToSlide || 1;\n  const domFullyLoaded = Boolean(\n    domLoaded && slidesToShow && containerWidth && itemWidth\n  );\n  const ssr = props.ssr && props.deviceType && !domFullyLoaded;\n  if (ssr) {\n    Object.keys(responsive).forEach(device => {\n      const { slidesToSlide } = responsive[device];\n      if (deviceType === device && slidesToSlide) {\n        slidesToScroll = slidesToSlide;\n      }\n    });\n  }\n  if (domFullyLoaded) {\n    Object.keys(responsive).forEach(item => {\n      const { breakpoint, slidesToSlide } = responsive[item];\n      const { max, min } = breakpoint;\n      if (\n        slidesToSlide &&\n        window.innerWidth >= min &&\n        window.innerWidth <= max\n      ) {\n        slidesToScroll = slidesToSlide;\n      }\n    });\n  }\n  return slidesToScroll;\n}\n\nexport {\n  isInLeftEnd,\n  isInRightEnd,\n  getInitialState,\n  getIfSlideIsVisbile,\n  getTransformForCenterMode,\n  getTransformForPartialVsibile,\n  notEnoughChildren,\n  getSlidesToSlide\n};\n"]},"metadata":{},"sourceType":"module"}